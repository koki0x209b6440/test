import java.awt.Graphics;
import java.awt.Image;
import java.awt.Point;
import java.awt.Rectangle;

import javax.swing.ImageIcon;

/*
 * Created on 2005/03/09
 *
 */

/**
 * エイリアンクラス
 * 
 * @author mori
 *  
 */
public class Alien {

    // エイリアンの墓（画面に表示されない場所）
    private static final Point TOMB = new Point(-20, -100);
    private int[][] Markingmap={

        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}};

    // 移動スピード
    private int speed;
    // エイリアンの位置（x座標）
    private int x;
    // エイリアンの位置（y座標）
    private int y;
    private int vx,vy;
    // エイリアンの幅
    private int width;
    // エイリアンの高さ
    private int height;
    // エイリアンの画像
    private Image image;

    // エイリアンの移動
    public static final int MAX = 50;
    private Point[] queue=new Point[MAX];
    private Point[] buffer=new Point[MAX];
    private boolean isBuffer;
    private int in=0,out=0;
    private int left;
    private int right;

    // エイリアンが生きてるかどうか
    private boolean isAlive;

    // メインパネルへの参照
    private MainPanel panel;

    public Alien(int x, int y, int speed, MainPanel panel) {
	for(int i=0; i<MAX; i++)queue[i] =new Point(0,0);
	for(int i=0; i<MAX; i++)buffer[i]=new Point(0,0);

        this.x = x;
        this.y = y;
        this.speed = speed;
        this.panel = panel;

	queue[0].x=getPosInMap().x; queue[0].y=getPosInMap().y;//初期位置
        isAlive = true;
	isBuffer=false;
        // イメージをロード
        loadImage();
    }

    public void move(Player player){

	if(!isBuffer){//キューに行き先を追加していくプロセス
	    bfs(player);
	    createBuff(player);
	}
	/**
	else{//キューから取り出して追う
	    lockon();
	    if(vx==0 && vy==0){
		if(in==out){ isBuffer=false; queue[0]=queue[in]; in=0; out=1; return; }
		else out++;
		lockon();
	    }
	    x+=vx;
	    y+=vy;
	}
	*/
    }

    private void enqueue(int i,int j){
	in++;
	queue[in].x=i;  queue[in].y=j;
    }
    private Point dequeue(){
	return queue[out++];
    }


    private void bfs(Player player){

	Point now=dequeue();
	int i=now.x; int j=now.y;
	
	int to_i,to_j;
	int count=0;
	while(true){
	    if(now==player.getPosInMap() ){ isBuffer=true; break;}//
	    if(count==0)     { to_i=i+1; to_j=  j; }//上
	    else if(count==1){ to_i=i-1; to_j=  j; }//下
	    else if(count==2){ to_i=  i; to_j=j+1; }//左
	    else if(count==3){ to_i=  i; to_j=j-1; }//右
	    else break;
	    count++;
	    if(MainPanel.map[to_i][to_j]==0){
		Markingmap[to_i][to_j]=Markingmap[i][j]-1;
		enqueue(to_i,to_j);
	    }
	    Point check=new Point(to_i,to_j);
	    if(check==player.getPosInMap() ){ isBuffer=true; break;}//
	}
	if(in>out)bfs(player);
    }

    private void createBuff(Player player){
	int cost=-Markingmap[player.getPosInMap().x][player.getPosInMap().y];
	Point buff=new Point(player.getPosInMap().x ,player.getPosInMap().y);

	int to_i=0,to_j=0;
	int count=0;
	while(true){
	    buffer[cost--]=buff;
	    int i=buffer[cost+1].x  ,  j=buffer[cost+1].y;
	    if(count==0)     { to_i=i+1; to_j=  j; }//上
	    else if(count==1){ to_i=i-1; to_j=  j; }//下
	    else if(count==2){ to_i=  i; to_j=j+1; }//左
	    else if(count==3){ to_i=  i; to_j=j-1; }//右
	    count++;

	    if(Markingmap[to_i][to_j]==cost){ buff.x=to_i; buff.y=to_j; }
	    if(cost==0)break;
	}
    }

    public void lockon() {
	Point target=new Point(queue[out].y*MainPanel.CS , queue[out].x*MainPanel.CS);
	int dirx,diry;
	if(x==target.x) dirx=0;
	else if(x<target.x)dirx=1;
	else dirx=-1;
	if(y==target.y)diry=0;
	else if(y<target.y)diry=1;
	else diry=-1;

	vx=dirx*speed;
	vy=diry*speed;
    }

    /*
     * エイリアンと弾の衝突を判定するx
     */
    public boolean collideWith(Shot shot) {
        // エイリアンの矩形を求める
        Rectangle rectAlien = new Rectangle(x, y, width, height);
        // 弾の矩形を求める
        Point pos = shot.getPos();
        Rectangle rectShot = new Rectangle(pos.x, pos.y, 
                shot.getWidth(), shot.getHeight());

        // 矩形同士が重なっているか調べる
        // 重なっていたら衝突している
        return rectAlien.intersects(rectShot);
    }
    public boolean collideWithCS(CSstar csstar) {
        // エイリアンの矩形を求める
        Rectangle rectAlien = new Rectangle(x, y, width, height);
        // 弾の矩形を求める
        Point pos = csstar.getPos();
        Rectangle rectShot = new Rectangle(pos.x, pos.y, 
                csstar.getWidth(), csstar.getHeight());

        // 矩形同士が重なっているか調べる
        // 重なっていたら衝突している
        return rectAlien.intersects(rectShot);
    }

    /**
     * エイリアンが死ぬ、墓へ移動
     *  
     */
    public void die() {
        setPos(TOMB.x, TOMB.y);
        isAlive = false;
    }

    /**
     * エイリアンの幅を返す
     * 
     * @param width エイリアンの幅
     */
    public int getWidth() {
        return width;
    }

    /**
     * エイリアンの高さを返す
     * 
     * @return height エイリアンの高さ
     */
    public int getHeight() {
        return height;
    }

    /**
     * エイリアンの位置を返す
     * 
     * @return エイリアンの位置座標
     */
    public Point getPos() {
        return new Point(x, y);
    }

    public Point getQ(){
	return queue[in];
    }

    /**
     * エイリアンの位置を(x,y)にセットする
     * 
     * @param x 移動先のx座標
     * @param y 移動先のy座標
     */
    public void setPos(int x, int y) {
        this.x = x;
        this.y = y;
    }
    public Point getPosInMap() {
	int i,j;
	for(i=0; i<MainPanel.ROW; i++){
	    for(j=0; j<MainPanel.COL; j++){
		if(MainPanel.map[i][j]==0)
		    if(  ( (j-0.5)*MainPanel.CS) <x&&x< ( (j+1)*MainPanel.CS) )
			if(  ( (i-0.5)*MainPanel.CS) <y&&y<  ( (i+1)*MainPanel.CS) )
			     return new Point(i,j);

	    }
	}
	return new Point(0,0);
    }

    public boolean isHitInMap(Point point) {
	int i,j;
	for(i=0; i<MainPanel.ROW; i++){
	    for(j=0; j<MainPanel.COL; j++){
		if(MainPanel.map[i][j]==1)
		    if(  ( (j-0.5)*MainPanel.CS) <point.x&&point.x< ( (j+1)*MainPanel.CS) )
			if(  ( (i-0.5)*MainPanel.CS) <point.y&&point.y<  ( (i+1)*MainPanel.CS) )
			     return true;

	    }
	}
	return false;
    }
    /**
     * エイリアンが生きているか
     * 
     * @return 生きていたらtrueを返す
     */
    public boolean isAlive() {
        return isAlive;
    }

    /**
     * エイリアンを描画する
     * 
     * @param g 描画オブジェクト
     */
    public void draw(Graphics g) {
        g.drawImage(image, x, y, null);
    }

    /**
     * イメージをロードする
     *  
     */
    private void loadImage() {
        // エイリアンのイメージを読み込む
        // ImageIconを使うとMediaTrackerを使わなくてすむ
        ImageIcon icon = new ImageIcon(getClass()
                .getResource("image/alien.gif"));
        image = icon.getImage();

        // 幅と高さをセット
        width = image.getWidth(panel);
        height = image.getHeight(panel);
    }
}